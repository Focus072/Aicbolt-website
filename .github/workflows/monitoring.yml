name: Monitoring & Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 */6 * * *' # Every 6 hours
  workflow_dispatch:

jobs:
  health-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm start &
          sleep 30

      - name: Run health check
        run: |
          node monitoring/health-check.js
        env:
          APP_URL: http://localhost:3000
          ALERT_EMAIL: ${{ secrets.ALERT_EMAIL }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}

      - name: Upload health check results
        uses: actions/upload-artifact@v4
        with:
          name: health-check-results
          path: monitoring/monitoring-reports/

  performance-test:
    runs-on: ubuntu-latest
    needs: health-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm start &
          sleep 30

      - name: Run performance monitoring
        run: |
          timeout 300 node monitoring/performance-monitor.js
        env:
          APP_URL: http://localhost:3000

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: monitoring/monitoring-reports/

  resilience-test:
    runs-on: ubuntu-latest
    needs: health-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm start &
          sleep 30

      - name: Run resilience testing
        run: |
          node monitoring/resilience-test.js
        env:
          APP_URL: http://localhost:3000

      - name: Upload resilience results
        uses: actions/upload-artifact@v4
        with:
          name: resilience-results
          path: monitoring/monitoring-reports/

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run dependency check
        run: |
          npx audit-ci --config audit-ci.json

      - name: Check for secrets
        run: |
          npx detect-secrets scan --baseline .secrets.baseline

  notify-results:
    runs-on: ubuntu-latest
    needs: [health-check, performance-test, resilience-test, security-scan]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: results/

      - name: Generate summary report
        run: |
          echo "# Monitoring Results" > monitoring-summary.md
          echo "## Health Check" >> monitoring-summary.md
          echo "- Status: ${{ needs.health-check.result }}" >> monitoring-summary.md
          echo "## Performance Test" >> monitoring-summary.md
          echo "- Status: ${{ needs.performance-test.result }}" >> monitoring-summary.md
          echo "## Resilience Test" >> monitoring-summary.md
          echo "- Status: ${{ needs.resilience-test.result }}" >> monitoring-summary.md
          echo "## Security Scan" >> monitoring-summary.md
          echo "- Status: ${{ needs.security-scan.result }}" >> monitoring-summary.md

      - name: Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-summary
          path: monitoring-summary.md

      - name: Notify on failure
        if: failure()
        run: |
          echo "ðŸš¨ Monitoring tests failed!"
          # Add webhook notification here
